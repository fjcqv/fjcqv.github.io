<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>CTF记录 SQL注入</title><url>/post/2023-04-26_ctf%E8%AE%B0%E5%BD%95-sql%E6%B3%A8%E5%85%A5/</url><categories><category><no value=/></categories><tags><tag>CTF</tag><tag>SQL</tag></tags><content type="html"><![CDATA[CTF学习记录-PHP出现以下处理方案
MYSQL #当前用户 select user(); #当前使用的数据库 select datebase() ; #当前全部数据库名 select group_concat(schema_name) from information_schema.schemata; #x数据库下的表 select group_concat(table_name) from information_schema.tables where table_schema=&#39;x&#39;; #x数据库下的y表的列 select group_concat(column_name) from information_schema.columns where table_schema=&#39;x&#39; and table_name=&#39;y&#39; ]]></content></entry><entry><title>CTF记录 PHP</title><url>/post/2023-04-25_ctf%E8%AE%B0%E5%BD%95-php/</url><categories><category><no value=/></categories><tags><tag>CTF</tag><tag>PHP</tag></tags><content type="html"><![CDATA[CTF学习记录-PHP出现以下处理方案
1.PHP LFI 漏洞 源代码如下
&lt;meta charset=&#34;utf8&#34;&gt; &lt;?php error_reporting(0); $file = $_GET[&#34;file&#34;]; if(stristr($file,&#34;php://input&#34;) || stristr($file,&#34;zip://&#34;) || stristr($file,&#34;phar://&#34;) || stristr($file,&#34;data:&#34;)){ exit(&#39;hacker!&#39;); } if($file){ include($file); }else{ echo &#39;&lt;a href=&#34;?file=flag.php&#34;&gt;tips&lt;/a&gt;&#39;; } ?&gt; 使用PHP伪协议将flag.php文件转换成base64 格式
php://filter/read=convert.base64-encode/resource=flag.php 2.PHP 反序列化 php在unserialize()函数中将字符串恢复为对象时会调用PHP魔术方法
方法 作用 __construct() 构造函数，实例化类时自动调用 __destruct() 析构函数，销毁对象时自动调用 __sleep() 序列化对象时自动调用 __wakeup() 反序列化对象时自动调用 __toString() 类被当成字符串时自动调用 使用以下代码可以产生渗透需要的序列化字符串
&lt;?php class Name{ private $username = &#39;admin&#39;; private $password = &#39;100&#39;; } $object = new Name(); var_dump(serialize($object)) ; ?&gt; O:4:&ldquo;Name&rdquo;:2:{s:14:&quot; Name username&quot;;s:5:&ldquo;admin&rdquo;;s:14:&quot; Name password&quot;;s:3:&ldquo;100&rdquo;;}
需要注意的是变量受到不同修饰符（public，private，protected）修饰进行序列化时，序列化后变量的长度和名称会发生变化。
使用public修饰进行序列化后，变量长度不变，正常输出。 使用private修饰进行序列化后，序列化时: \x00 + [私有成员所在类名] + \x00 [变量名] 使用protected修饰进行序列化后，序列化时：\x00 + * + \x00 + [变量名] ]]></content></entry><entry><title>关于 Hugo NexT 组织</title><url>/about.html</url><categories/><tags/><content type="html">Hugo NexT 组织是由众多喜爱 NexT 主题及风格的世界各地友人共同组建而成，为的就是让这个主题继续在 Hugo 引擎中也能得到发扬光大，在此也欢迎你的加入！
我们的愿景 延续 NexT 经典的黑白调搭配，保持简单的易用性及强大的功能。
使用反馈 加入 GitHub Discussions 或 Gitter 在线讨论 🍻 GitHub Issues 提交错误报告 🐛 GitHub Feature 表新功能的想法 ✨ 同时国内用户也可加入 QQ 群交流： 604710815</content></entry><entry><title>安装签到网站</title><url>/post/2020-11-15_%E5%AE%89%E8%A3%85%E7%AD%BE%E5%88%B0%E7%BD%91%E7%AB%99/</url><categories><category><no value=/></categories><tags><tag><no value=/><tag><no value=/></tags><content type="html">#安装签到网站 https://github.com/AragonSnow/qiandao 1. 下载docker-ce的repo curl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo 2. 安装依赖 yum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm 3. 安装docker-ce dnf -y install docker-ce docker-ce-cli --nobest 4.启动 docker systemctl start docker 5.查看 docker 版本信息 docker -v 6.设置开机自动启动 systemctl enable --now docker 安装docker容器 docker run -d --restart=always --name qiandao -p 12345:80 -v $(pwd)/qiandao/config:/usr/src/app/config asdaragon/qiandao 安装完成后注册账号 docker exec -it qiandao /bin/bash python ./chrole.py 刚才注册的邮箱 admin 设置为管理员</content></entry><entry><title>centos8安装seafile</title><url>/post/2020-11-10_centos8%E5%AE%89%E8%A3%85seafile/</url><categories><category>web</category></categories><tags><tag>seafile</tag><tag>centos</tag></tags><content type="html">centos8安装seafile
centos8 安装seafile 小记 1.安装centos 首先安装centos8，基本的配置操作。
升级centos内核 操作略
//升级系统 yum -y update /安装 wget yum -y install wget
设置为阿里yum源
wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo yum clean all //清除原有yum缓存 yum makecache //生成新的缓存 安装必要软件
yum install lrzsz systat tree vim nmap unzip dos2unix nc lsof dnf group install &amp;#34;Development Tools&amp;#34; 2.准备工作 yum install python3 python3-setuptools python3-pip python3-ldap -y //根据需要更新pip源,略 ~/.pip/pip.conf ####升级pip版本（不升级安装依赖包可能会报错，提示文件缺失） pip3 install --upgrade pip ###安装python包 pip3 install --timeout=3600 Pillow pylibmc captcha jinja2 sqlalchemy psd-tools django-pylibmc django-simple-captcha 下载一键安装seafile脚本
wget https://cdn.jsdelivr.net/gh/haiwen/seafile-server-installer-cn@master/seafile-server-7.1-centos-amd64-http pro下载地址：https://download.seafile.com/d/6e5297246c/?p=%2Fpro&amp;amp;mode=list 放置seafile-pro-server_7.._x86-64_CentOS.tar.gz到/opt 路径
3.开始安装 bash seafile-server-7.1-centos-amd64-http 7.1.8 选择pro 等待安装完成 4.注意事项 4.1 目前7.1在虚拟机下，搜索服务基本会内存溢出 安装完后请注意先关闭seafile服务
systemctl stop seafile systemctl stop seahub 及时修改seafevents.conf关闭搜索服务。
4.2 7.1以上office预览需要安装Libreoffice 新版。 详见 https://cloud.seafile.com/published/seafile-manual-cn/deploy_pro/office_documents_preview.md#user-content-7.1%20%E4%BB%A5%E5%8F%8A%E4%B9%8B%E5%90%8E%E7%89%88%E6%9C%AC 5.内网穿透 服务器建立在局域网内，使用免费的Sakura FRP进行内网穿透。 网址：https://www.natfrp.com 注册账号根据说明建立服务。</content></entry><entry><title>Git仓库删除所有提交历史记录</title><url>/post/2018-06-29_git%E4%BB%93%E5%BA%93%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/</url><categories><category>git</category></categories><tags><tag>git</tag></tags><content type="html">把旧项目提交到git上，但是会有一些历史记录，这些历史记录中可能会有项目密码等敏感信息。如何删除这些历史记录，形成一个全新的仓库，并且保持代码不变呢？
git checkout --orphan latest_branch git add -A git commit -am &amp;#34;commit message&amp;#34; git branch -D main git branch -m main git push -f origin main</content></entry><entry><title>hexo建站总结</title><url>/post/2018-06-28_hexo%E5%BB%BA%E7%AB%99%E6%80%BB%E7%BB%93/</url><categories><category>web</category></categories><tags><tag>自定义</tag><tag>个性化</tag><tag>布局</tag></tags><content type="html"><![CDATA[前言 最近突然想整理下技术的思路，刚好看到码云也有Gitee Pages 服务,支持Jekyll、Hugo、Hexo。试验了下决定选用hexo搭建博客。
软件准备 以下均为在windows环境下操作，首先先安装以下程序
git node.js git设置 $ git config --global user.name &#34;fjcqv&#34; $ git config --global user.email fjcqv@qq.com 有必要可设置git使用ssh秘钥，这样可以免登录。
npm设置 //设置npm库位置 npm config set prefix &#34;D:/Program Files/nodejs/npm_global&#34; npm config set cache &#34;D:/Program Files/nodejs/npm_cache&#34; //在中国，中国，中国，你应该设置淘宝镜像来加速下载。 npm config set registry &#34;https://registry.npm.taobao.org/&#34; npm config set electron_mirror &#34;https://npm.taobao.org/mirrors/electron/&#34; 使用npm安装Hexo npm install hexo-cli -g hexo init blog cd blog npm install hexo server 然后访问localhost:4000就能看到雏形。
选择hexo主题 这边我们使用nexT作为主题。 先从https://github.com/theme-next/hexo-theme-next fork到自己仓库。 然后在站点根目录终端输入 //创建子模块 git submodule add &#34;git@github.com:fjcqv/hexo-theme-next.git&#34; &#34;themes/next&#34; //或者以下命令，个人觉得上面的好处是修改主题维护方便点。 git clone https://github.com/theme-next/hexo-theme-next themes/next 打开站点配置文件_config.yml， 找到 theme 字段，并将其值更改为 next。 # 扩展 ## 插件: https://hexo.io/plugins/ ## 主题: https://hexo.io/themes/ theme: next 重新生成 hexo clean //清除缓存 hexo g //重新生成代码 hexo s //部署到本地 //然后打开浏览器访问 localhost:4000 查看效果 部署 选择部署仓库 本文选择码云，毕竟在国内，访问速度快点 建立一个与自己个性地址同名的项目 配置 打开站点配置文件_config.yml， 找到 deploy 字段修改。
# 部署 ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: git@gitee.com:cqv/cqv.git branch: master message: &#39;站点更新:{{now(&#34;YYYY-MM-DD HH:mm:ss&#34;)}}&#39; 安装插件并部署 npm install hexo-deployer-git --save hexo d 开启pages服务 码云需要在项目选择gitee pages服务将其开启，才能访问。
]]></content></entry><entry><title>站点示例</title><url>/flinks.html</url><categories/><tags/><content type="html">如想交换本站友情链接，请在评论区留下你的站点信息，格式参考如下：
- name: Hugo-NexT desc: Hugo NexT 官方预览网站。 avatar: https://hugo-next.eu.org/imgs/hugo_next_avatar.png link: https://hugo-next.eu.org</content></entry></search>